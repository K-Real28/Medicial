//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @return Success
   */
  getCity(): Observable<City[]> {
    let url_ = this.baseUrl + "/Cities/GetCity";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetCity(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetCity(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<City[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<City[]>;
    }));
  }

  protected processGetCity(response: HttpResponseBase): Observable<City[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(City.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getDoctor(): Observable<Doctor[]> {
    let url_ = this.baseUrl + "/api/Doctors/GetDoctor";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetDoctor(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetDoctor(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Doctor[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Doctor[]>;
    }));
  }

  protected processGetDoctor(response: HttpResponseBase): Observable<Doctor[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(Doctor.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getPolyclinic(): Observable<Polyclinic[]> {
    let url_ = this.baseUrl + "/api/Polyclinics/GetPolyclinic";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetPolyclinic(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetPolyclinic(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Polyclinic[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Polyclinic[]>;
    }));
  }

  protected processGetPolyclinic(response: HttpResponseBase): Observable<Polyclinic[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(Polyclinic.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  getSpecialization(): Observable<Specialization[]> {
    let url_ = this.baseUrl + "/api/Specializations/GetSpecialization";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetSpecialization(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetSpecialization(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Specialization[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Specialization[]>;
    }));
  }

  protected processGetSpecialization(response: HttpResponseBase): Observable<Specialization[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(Specialization.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  weatherForecast(): Observable<WeatherForecast[]> {
    let url_ = this.baseUrl + "/WeatherForecast";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processWeatherForecast(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processWeatherForecast(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<WeatherForecast[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
    }));
  }

  protected processWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(WeatherForecast.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class City implements ICity {
  id?: number;
  name?: string | undefined;
  polyclinics?: Polyclinic[] | undefined;

  constructor(data?: ICity) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      if (Array.isArray(_data["polyclinics"])) {
        this.polyclinics = [] as any;
        for (let item of _data["polyclinics"])
          this.polyclinics!.push(Polyclinic.fromJS(item));
      }
    }
  }

  static fromJS(data: any): City {
    data = typeof data === 'object' ? data : {};
    let result = new City();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    if (Array.isArray(this.polyclinics)) {
      data["polyclinics"] = [];
      for (let item of this.polyclinics)
        data["polyclinics"].push(item.toJSON());
    }
    return data;
  }
}

export interface ICity {
  id?: number;
  name?: string | undefined;
  polyclinics?: Polyclinic[] | undefined;
}

export class Doctor implements IDoctor {
  id?: number;
  fullName?: string | undefined;
  shortInfo?: string | undefined;
  fullInfo?: string | undefined;
  costOfVisit?: number | undefined;
  phoneNumber?: string | undefined;
  expOfSpec?: string | undefined;
  photo?: string | undefined;
  specializationDoctors?: SpecializationDoctor[] | undefined;
  polyclinicDoctors?: PolyclinicDoctor[] | undefined;

  constructor(data?: IDoctor) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.fullName = _data["fullName"];
      this.shortInfo = _data["shortInfo"];
      this.fullInfo = _data["fullInfo"];
      this.costOfVisit = _data["costOfVisit"];
      this.phoneNumber = _data["phoneNumber"];
      this.expOfSpec = _data["expOfSpec"];
      this.photo = _data["photo"];
      if (Array.isArray(_data["specializationDoctors"])) {
        this.specializationDoctors = [] as any;
        for (let item of _data["specializationDoctors"])
          this.specializationDoctors!.push(SpecializationDoctor.fromJS(item));
      }
      if (Array.isArray(_data["polyclinicDoctors"])) {
        this.polyclinicDoctors = [] as any;
        for (let item of _data["polyclinicDoctors"])
          this.polyclinicDoctors!.push(PolyclinicDoctor.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Doctor {
    data = typeof data === 'object' ? data : {};
    let result = new Doctor();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["fullName"] = this.fullName;
    data["shortInfo"] = this.shortInfo;
    data["fullInfo"] = this.fullInfo;
    data["costOfVisit"] = this.costOfVisit;
    data["phoneNumber"] = this.phoneNumber;
    data["expOfSpec"] = this.expOfSpec;
    data["photo"] = this.photo;
    if (Array.isArray(this.specializationDoctors)) {
      data["specializationDoctors"] = [];
      for (let item of this.specializationDoctors)
        data["specializationDoctors"].push(item.toJSON());
    }
    if (Array.isArray(this.polyclinicDoctors)) {
      data["polyclinicDoctors"] = [];
      for (let item of this.polyclinicDoctors)
        data["polyclinicDoctors"].push(item.toJSON());
    }
    return data;
  }
}

export interface IDoctor {
  id?: number;
  fullName?: string | undefined;
  shortInfo?: string | undefined;
  fullInfo?: string | undefined;
  costOfVisit?: number | undefined;
  phoneNumber?: string | undefined;
  expOfSpec?: string | undefined;
  photo?: string | undefined;
  specializationDoctors?: SpecializationDoctor[] | undefined;
  polyclinicDoctors?: PolyclinicDoctor[] | undefined;
}

export class Polyclinic implements IPolyclinic {
  id?: number;
  name?: string | undefined;
  cityId?: number | undefined;
  city?: City;
  address?: string | undefined;
  phoneNumber?: number | undefined;
  photo?: string | undefined;
  polyclinicDoctors?: PolyclinicDoctor[] | undefined;
  specializationDoctors?: SpecializationDoctor[] | undefined;

  constructor(data?: IPolyclinic) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.cityId = _data["cityId"];
      this.city = _data["city"] ? City.fromJS(_data["city"]) : <any>undefined;
      this.address = _data["address"];
      this.phoneNumber = _data["phoneNumber"];
      this.photo = _data["photo"];
      if (Array.isArray(_data["polyclinicDoctors"])) {
        this.polyclinicDoctors = [] as any;
        for (let item of _data["polyclinicDoctors"])
          this.polyclinicDoctors!.push(PolyclinicDoctor.fromJS(item));
      }
      if (Array.isArray(_data["specializationDoctors"])) {
        this.specializationDoctors = [] as any;
        for (let item of _data["specializationDoctors"])
          this.specializationDoctors!.push(SpecializationDoctor.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Polyclinic {
    data = typeof data === 'object' ? data : {};
    let result = new Polyclinic();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["cityId"] = this.cityId;
    data["city"] = this.city ? this.city.toJSON() : <any>undefined;
    data["address"] = this.address;
    data["phoneNumber"] = this.phoneNumber;
    data["photo"] = this.photo;
    if (Array.isArray(this.polyclinicDoctors)) {
      data["polyclinicDoctors"] = [];
      for (let item of this.polyclinicDoctors)
        data["polyclinicDoctors"].push(item.toJSON());
    }
    if (Array.isArray(this.specializationDoctors)) {
      data["specializationDoctors"] = [];
      for (let item of this.specializationDoctors)
        data["specializationDoctors"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPolyclinic {
  id?: number;
  name?: string | undefined;
  cityId?: number | undefined;
  city?: City;
  address?: string | undefined;
  phoneNumber?: number | undefined;
  photo?: string | undefined;
  polyclinicDoctors?: PolyclinicDoctor[] | undefined;
  specializationDoctors?: SpecializationDoctor[] | undefined;
}

export class PolyclinicDoctor implements IPolyclinicDoctor {
  id?: number;
  polyclinicId?: number | undefined;
  polyclinic?: Polyclinic;
  doctorId?: number | undefined;
  doctor?: Doctor;

  constructor(data?: IPolyclinicDoctor) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.polyclinicId = _data["polyclinicId"];
      this.polyclinic = _data["polyclinic"] ? Polyclinic.fromJS(_data["polyclinic"]) : <any>undefined;
      this.doctorId = _data["doctorId"];
      this.doctor = _data["doctor"] ? Doctor.fromJS(_data["doctor"]) : <any>undefined;
    }
  }

  static fromJS(data: any): PolyclinicDoctor {
    data = typeof data === 'object' ? data : {};
    let result = new PolyclinicDoctor();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["polyclinicId"] = this.polyclinicId;
    data["polyclinic"] = this.polyclinic ? this.polyclinic.toJSON() : <any>undefined;
    data["doctorId"] = this.doctorId;
    data["doctor"] = this.doctor ? this.doctor.toJSON() : <any>undefined;
    return data;
  }
}

export interface IPolyclinicDoctor {
  id?: number;
  polyclinicId?: number | undefined;
  polyclinic?: Polyclinic;
  doctorId?: number | undefined;
  doctor?: Doctor;
}

export class Specialization implements ISpecialization {
  id?: number;
  name?: string | undefined;
  specializationDoctors?: SpecializationDoctor[] | undefined;

  constructor(data?: ISpecialization) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      if (Array.isArray(_data["specializationDoctors"])) {
        this.specializationDoctors = [] as any;
        for (let item of _data["specializationDoctors"])
          this.specializationDoctors!.push(SpecializationDoctor.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Specialization {
    data = typeof data === 'object' ? data : {};
    let result = new Specialization();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    if (Array.isArray(this.specializationDoctors)) {
      data["specializationDoctors"] = [];
      for (let item of this.specializationDoctors)
        data["specializationDoctors"].push(item.toJSON());
    }
    return data;
  }
}

export interface ISpecialization {
  id?: number;
  name?: string | undefined;
  specializationDoctors?: SpecializationDoctor[] | undefined;
}

export class SpecializationDoctor implements ISpecializationDoctor {
  id?: number;
  specializitionId?: number | undefined;
  specialization?: Specialization;
  doctorId?: number | undefined;
  doctor?: Doctor;

  constructor(data?: ISpecializationDoctor) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.specializitionId = _data["specializitionId"];
      this.specialization = _data["specialization"] ? Specialization.fromJS(_data["specialization"]) : <any>undefined;
      this.doctorId = _data["doctorId"];
      this.doctor = _data["doctor"] ? Doctor.fromJS(_data["doctor"]) : <any>undefined;
    }
  }

  static fromJS(data: any): SpecializationDoctor {
    data = typeof data === 'object' ? data : {};
    let result = new SpecializationDoctor();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["specializitionId"] = this.specializitionId;
    data["specialization"] = this.specialization ? this.specialization.toJSON() : <any>undefined;
    data["doctorId"] = this.doctorId;
    data["doctor"] = this.doctor ? this.doctor.toJSON() : <any>undefined;
    return data;
  }
}

export interface ISpecializationDoctor {
  id?: number;
  specializitionId?: number | undefined;
  specialization?: Specialization;
  doctorId?: number | undefined;
  doctor?: Doctor;
}

export class WeatherForecast implements IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  readonly temperatureF?: number;
  summary?: string | undefined;

  constructor(data?: IWeatherForecast) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
      this.temperatureC = _data["temperatureC"];
      (<any>this).temperatureF = _data["temperatureF"];
      this.summary = _data["summary"];
    }
  }

  static fromJS(data: any): WeatherForecast {
    data = typeof data === 'object' ? data : {};
    let result = new WeatherForecast();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["date"] = this.date ? formatDate(this.date) : <any>undefined;
    data["temperatureC"] = this.temperatureC;
    data["temperatureF"] = this.temperatureF;
    data["summary"] = this.summary;
    return data;
  }
}

export interface IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | undefined;
}

function formatDate(d: Date) {
  return d.getFullYear() + '-' +
    (d.getMonth() < 9 ? ('0' + (d.getMonth() + 1)) : (d.getMonth() + 1)) + '-' +
    (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
